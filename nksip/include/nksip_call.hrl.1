%% -------------------------------------------------------------------
%%
%% nksip_call.hrl: SIP call processing types
%%
%% Copyright (c) 2013 Carlos Gonzalez Florido.  All Rights Reserved.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
%% -------------------------------------------------------------------

-ifndef(NKSIP_CALL_HRL_).
-define(NKSIP_CALL_HRL_, 1).

-record(raw_sipmsg, {
    sipapp_id :: nksip:sipapp_id(),
    transport :: nksip_transport:transport(),
    start :: nksip_lib:l_timestamp(),
    call_id :: nksip:call_id(),
    class :: nksip_parse:msg_class(),
    headers :: [{binary(), binary()}],
    body :: nksip:body()
}).


-record(uas_trans, {
    pos :: integer(),
    id :: binary(),
    status :: nksip_call_uas:trans_status(),
    request :: nksip:request(),
    response :: nksip:response(),
    loop_id :: binary(),
    s100_timer :: reference(),
    timeout_timer :: reference(),
    retrans_timer :: reference(),
    next_retrans :: non_neg_integer(),
    expire_timer :: reference()
}).


-record(call_sd, {
    app_id :: nksip:sipapp_id(),
    call_id :: nksip:call_id(),
    module :: atom(),
    app_pid :: pid(),
    app_opts :: nksip_lib:proplist(),
    next_pos :: integer(),
    uas_trans = [] :: [#uas_trans{}],
    msg_queue :: queue(),
    cancelled :: boolean(),
    replies :: [],
    timer :: reference()
}).

-endif.
